{"version":3,"sources":["api/api.ts","Redux/appReducer.ts","Copmonents/FavoriteJokeBlock_Component.tsx","Copmonents/FavoriteJokeButton_Components.tsx","Copmonents/ButtonBlock_Component.tsx","Copmonents/TextContainer_Component.tsx","App.tsx","reportWebVitals.ts","Redux/redux-store.ts","index.tsx"],"names":["instans","axios","create","baseURL","JokeAPI","get","then","response","data","TOGGLE_FAVORITE_JOKE_LIST_MODE","SET_CURRENT_JOKE","ADD_JOKE_IN_FAVORITE_JOKE_LIST","REMOVE_JOKE_IN_FAVORITE_JOKE_LIST","CLEAR_FAVORITE_JOKE_LIST","initialState","isFavoriteJokeListOpen","currentJoke","favoriteJokeList","toggleFavoriteJokeList","type","removeJokeInFavoriteList","joke","appReducer","state","action","id","value","arr","length","unshift","pop","filter","elem","Menu","styled","div","props","open","css","JokeItems","BtnDelete","button","compose","connect","app","children","map","e","onClick","MenuButton","Bar","span","className","aria-label","BtnGroup","Btn","giveJokeTC","dispatch","a","resultCode","alert","addJokeInFavoriteList","clearFavoriteJokeList","useState","FlowJokeBtn","setFlowJokeBtn","useEffect","interval","setInterval","clearInterval","every","some","ContentBlock","Container","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","load","states","applyMiddleware","thunkMiddleware","save","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14302127.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instans = axios.create ({\n    baseURL: 'https://api.chucknorris.io/jokes/random',\n})\nexport const JokeAPI = {\n    giveMeJoke() {\n        return instans.get(``)\n            .then(response => {\n                return response.data\n            })\n    }\n}\n","import { ThunkAction } from 'redux-thunk'\nimport { AppStateType } from './redux-store'\nimport { JokeAPI } from '../api/api'\n\nconst TOGGLE_FAVORITE_JOKE_LIST_MODE = 'TOGGLE_FAVORITE_JOKE_LIST_MODE'\nconst SET_CURRENT_JOKE = 'SET_CURRENT_JOKE'\nconst ADD_JOKE_IN_FAVORITE_JOKE_LIST = 'ADD_JOKE_IN_FAVORITE_JOKE_LIST'\nconst REMOVE_JOKE_IN_FAVORITE_JOKE_LIST = 'REMOVE_JOKE_IN_FAVORITE_JOKE_LIST'\nconst CLEAR_FAVORITE_JOKE_LIST = 'CLEAR_FAVORITE_JOKE_LIST'\n\nexport type CurrentJokeType = {\n    id: string,\n    value: string\n} | null\n\ntype InitialStateType = {\n    isFavoriteJokeListOpen: boolean\n    currentJoke: CurrentJokeType\n    favoriteJokeList: Array<CurrentJokeType> | []\n}\n\nconst initialState: InitialStateType = {\n    isFavoriteJokeListOpen: false,\n    currentJoke: null,\n    favoriteJokeList: []\n}\n\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case TOGGLE_FAVORITE_JOKE_LIST_MODE:\n            return {\n                ...state,\n                isFavoriteJokeListOpen: !state.isFavoriteJokeListOpen\n            }\n        case SET_CURRENT_JOKE:\n            return {\n                ...state,\n                currentJoke: { id: action.id, value: action.value }\n            }\n        case ADD_JOKE_IN_FAVORITE_JOKE_LIST:\n            let arr = [...state.favoriteJokeList]\n            if (arr.length >= 10) {\n                arr.unshift(state.currentJoke)\n                arr.pop()\n            } else {\n                arr = [state.currentJoke, ...state.favoriteJokeList]\n            }\n            return {\n                ...state,\n                favoriteJokeList: [...arr]\n            }\n        case REMOVE_JOKE_IN_FAVORITE_JOKE_LIST:\n            return {\n                ...state,\n                favoriteJokeList: state.favoriteJokeList.filter(elem => elem?.id !== action.joke?.id)\n            }\n        case CLEAR_FAVORITE_JOKE_LIST:\n            return {\n                ...state,\n                favoriteJokeList: []\n            }\n        default:\n            return state\n    }\n}\n\n// --------------------------------\ntype ActionsTypes = ToggleFavoriteJokeListActionType | SetCurrentJokeActionType |\n    AddJokeInFavoriteListActionType | RemoveJokeInFavoriteListActionType | ClearFavoriteJokeListActionType\n// -----------ACTION---------------\ntype ToggleFavoriteJokeListActionType = {\n    type: typeof TOGGLE_FAVORITE_JOKE_LIST_MODE,\n}\nexport const toggleFavoriteJokeList = (): ToggleFavoriteJokeListActionType => ({ type: TOGGLE_FAVORITE_JOKE_LIST_MODE })\n\ntype SetCurrentJokeActionType = {\n    type: typeof SET_CURRENT_JOKE,\n    value: string,\n    id: string\n}\nexport const setCurrentJoke = (value: string, id: string): SetCurrentJokeActionType => ({ type: SET_CURRENT_JOKE, value, id })\n\ntype AddJokeInFavoriteListActionType = {\n    type: typeof ADD_JOKE_IN_FAVORITE_JOKE_LIST,\n}\nexport const addJokeInFavoriteList = (): AddJokeInFavoriteListActionType => ({ type: ADD_JOKE_IN_FAVORITE_JOKE_LIST })\n\ntype ClearFavoriteJokeListActionType = {\n    type: typeof CLEAR_FAVORITE_JOKE_LIST,\n}\nexport const clearFavoriteJokeList = (): ClearFavoriteJokeListActionType => ({ type: CLEAR_FAVORITE_JOKE_LIST })\n\ntype RemoveJokeInFavoriteListActionType = {\n    type: typeof REMOVE_JOKE_IN_FAVORITE_JOKE_LIST,\n    joke: CurrentJokeType\n}\nexport const removeJokeInFavoriteList = (joke: CurrentJokeType): RemoveJokeInFavoriteListActionType => ({ type: REMOVE_JOKE_IN_FAVORITE_JOKE_LIST, joke })\n// --------------------------------\n// Thunk creater\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\n// --------------------------------\nexport const giveJokeTC = (): ThunkType => async (dispatch: any) => {\n    let data = await JokeAPI.giveMeJoke()\n    if (data.resultCode === 0) {\n        alert('thunk api')\n    } else {\n        dispatch(setCurrentJoke(data.value, data.id))\n    }\n}\n// export const RemoveOrAddJokeInFavoriteJokeListTC = (): ThunkType => async (dispatch: any, getState) => {\n//     let state = getState()\n//     if (state.app.favoriteJokeList.length === 0 || state.app.favoriteJokeList.some(elem =>\n//         elem?.id != state.app.currentJoke?.id)) {\n//         dispatch(addJokeInFavoriteList())\n//     } else {\n//         dispatch(removeJokeInFavoriteList())\n//     }\n// }\n\nexport default appReducer","import React from 'react'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { AppStateType } from '../Redux/redux-store'\nimport { toggleFavoriteJokeList, CurrentJokeType, removeJokeInFavoriteList } from '../Redux/appReducer'\nimport styled, { css } from 'styled-components'\n\ninterface IPropsStyled { open: boolean }\n\nconst Menu = styled.div<IPropsStyled>`\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    bottom: 0px;\n    z-index: 293;\n    display: block;\n    width: 400px;\n    max-width: 100%;\n    margin-top: 0px;\n    padding-top: 100px;\n    padding-right: 0px;\n    align-items: stretch;\n    background-color: #4CAF50;\n    transform: translateX(-100%);\n    transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n    ${props => props.open && css` transform: translateX(0); `}\n`\n\nconst JokeItems = styled.div`\n    background-color : #f0f0f0;\n    margin: 20px 5px;\n    font-size: 12px;\n    display: flex;\n    justify-content: space-between;\n`\nconst BtnDelete= styled.button`\n    display: block;\n    height: 25px;\n    width: 25px;\n`\n//----------TYPE BLOCK------------\ntype MapStateToPropsType = {\n    isFavoriteJokeListOpen: boolean\n    favoriteJokeList: Array<CurrentJokeType> | []\n}\ntype MapDispathPropsType = {\n    toggleFavoriteJokeList: () => void\n    removeJokeInFavoriteList:(joke : CurrentJokeType)=> void\n}\ntype OwnPropsType = {}\ntype PropsType = MapStateToPropsType & MapDispathPropsType & OwnPropsType\n// ----------------------------------------------------------------------------\nconst FavoriteJokeBlock: React.FC<PropsType> = ({ removeJokeInFavoriteList, isFavoriteJokeListOpen, favoriteJokeList, children, ...props }) => {\n    return <Menu open={isFavoriteJokeListOpen}>\n        {favoriteJokeList.length !== 0\n            ? (favoriteJokeList as Array<CurrentJokeType>).map((e) => {\n                return <JokeItems>{e?.value} \n                <BtnDelete onClick={()=>{removeJokeInFavoriteList(e)}} >X</BtnDelete>\n                </JokeItems>\n            })\n            : <></>\n        }\n    </Menu>\n}\n// ----------------------------------------------------------------------------\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isFavoriteJokeListOpen: state.app.isFavoriteJokeListOpen,\n        favoriteJokeList: state.app.favoriteJokeList\n    }\n}\n// -----------------------------------------------------------------------------\nexport default compose(\n    connect<MapStateToPropsType, MapDispathPropsType, OwnPropsType, AppStateType>\n        (mapStateToProps, {\n            toggleFavoriteJokeList,\n            removeJokeInFavoriteList\n        })\n)(FavoriteJokeBlock)","import React from 'react'\nimport styled from 'styled-components'\nimport {connect} from 'react-redux'\nimport {compose} from 'redux'\nimport {AppStateType} from '../Redux/redux-store'\nimport {toggleFavoriteJokeList} from '../Redux/appReducer'\n\nconst MenuButton = styled.button`\n  display: block;\n  transform-origin: 16px 11px;\n  float: right;\n  margin-right: 20px;\n  outline: 0;\n  border: 0;\n  padding: 12px;\n  background: none;\n\n  span {\n    transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n  }\n\n  :focus {\n    border: medium none rgb(111, 255, 176);\n    box-shadow: rgb(111, 255, 176) 0 0 2px 2px;\n    outline: 0;\n  }\n\n  :hover {\n    span:nth-of-type(1) {\n      width: 33px;\n    }\n\n    span:nth-of-type(2) {\n      width: 40px;\n    }\n\n    span:nth-of-type(3) {\n      width: 30px;\n    }\n  }\n\n  &.active {\n    span:nth-of-type(1) {\n      transform: rotate(45deg) translate(10px, 10px);\n      width: 40px;\n    }\n\n    span:nth-of-type(2) {\n      opacity: 0;\n      pointer-events: none;\n    }\n    \n    span:nth-of-type(3) {\n      transform: rotate(-45deg) translate(7px, -7px);\n      width: 40px;\n    }\n  }\n`\nconst Bar = styled.span`\n  display: block;\n  width: 40px;\n  height: 5px;\n  margin-bottom: 7px;\n  background-color: #4CAF50;\n`\n//----------TYPE BLOCK------------\ntype MapStateToPropsType = {\n    isFavoriteJokeListOpen: boolean\n}\ntype MapDispathPropsType = {\n  toggleFavoriteJokeList:()=> void\n}\ntype OwnPropsType = {}\ntype PropsType = MapStateToPropsType & MapDispathPropsType & OwnPropsType\n// -------------------------------\nconst FavoriteJokeButton : React.FC<PropsType> = ({isFavoriteJokeListOpen, toggleFavoriteJokeList, ...props}) => {\n    return (\n        <MenuButton\n            className={isFavoriteJokeListOpen ? 'active' : ''}\n            aria-label=\"Открыть главное меню\"\n            onClick={toggleFavoriteJokeList}\n        >\n            <Bar />\n            <Bar />\n            <Bar />\n        </MenuButton>\n    )\n}\n// -----------------------------------------------------------------------------\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n      isFavoriteJokeListOpen : state.app.isFavoriteJokeListOpen\n    }\n}\n// -----------------------------------------------------------------------------\nexport default compose(\n    connect<MapStateToPropsType, MapDispathPropsType, OwnPropsType, AppStateType>\n        (mapStateToProps, {\n          toggleFavoriteJokeList\n        })\n)(FavoriteJokeButton)","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { AppStateType } from '../Redux/redux-store'\nimport { clearFavoriteJokeList, removeJokeInFavoriteList, CurrentJokeType, giveJokeTC, addJokeInFavoriteList } from '../Redux/appReducer'\nimport styled from 'styled-components'\nimport FavoriteJokeButton from './FavoriteJokeButton_Components'\n\nconst BtnGroup = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 150px;\n    \n`\nconst Btn = styled.button`\n    margin-top: 10px;\n    background-color: #4CAF50;\n    border: 1px solid green;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    cursor: pointer;\n    width: 150px;\n    display: block;\n    :hover {\n        background-color: #3e8e41;\n    }\n`\n//----------TYPE BLOCK------------\ntype MapStateToPropsType = {\n    isFavoriteJokeListOpen: boolean\n    currentJoke: CurrentJokeType\n    favoriteJokeList: Array<CurrentJokeType> | []\n}\ntype MapDispathPropsType = {\n    giveJokeTC: () => void\n    addJokeInFavoriteList: () => void\n    removeJokeInFavoriteList: (joke: CurrentJokeType) => void\n    clearFavoriteJokeList: () => void\n}\ntype OwnPropsType = {}\ntype PropsType = MapStateToPropsType & MapDispathPropsType & OwnPropsType\n// -------------------------------\nconst ButtonBlock: React.FC<PropsType> = ({ clearFavoriteJokeList, removeJokeInFavoriteList, addJokeInFavoriteList,\n    giveJokeTC, currentJoke, favoriteJokeList, ...props }) => {\n\n    const [FlowJokeBtn, setFlowJokeBtn] = useState(false)\n    const toggleFlowJokeBtn = () => { setFlowJokeBtn(!FlowJokeBtn) }\n    useEffect(() => {\n        if (FlowJokeBtn === true) {\n            const interval = setInterval(() => {giveJokeTC()},\n            3000);\n            return () => clearInterval(interval);\n        }\n    }, [FlowJokeBtn, giveJokeTC]);\n\n    const RemoveOrAddJokeInFavoriteJokeList = () => {\n        if (favoriteJokeList.length === 0 || favoriteJokeList.every(elem =>\n            elem?.id !== currentJoke?.id)) {\n            addJokeInFavoriteList()\n        } else {\n            removeJokeInFavoriteList(currentJoke)\n        }\n    }\n    return (\n        <BtnGroup>\n            <FavoriteJokeButton />\n            <Btn onClick={giveJokeTC}>{currentJoke ? \"Next joke\" : \"Show joke\"}</Btn>\n            <Btn onClick={toggleFlowJokeBtn}>{FlowJokeBtn ? 'Flow joke OFF' : 'Flow joke ON'}</Btn>\n            <Btn onClick={RemoveOrAddJokeInFavoriteJokeList}>\n                {(favoriteJokeList.some(e => e?.id === currentJoke?.id)) ? 'Remove from favorites' : 'Add to favorites'}\n            </Btn>\n            <Btn onClick={clearFavoriteJokeList}>Clear Favorit list</Btn>\n        </BtnGroup>\n    )\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isFavoriteJokeListOpen: state.app.isFavoriteJokeListOpen,\n        currentJoke: state.app.currentJoke,\n        favoriteJokeList: state.app.favoriteJokeList\n    }\n}\n// -----------------------------------------------------------------------------\nexport default compose(\n    connect<MapStateToPropsType, MapDispathPropsType, OwnPropsType, AppStateType>\n        (mapStateToProps, {\n            giveJokeTC,\n            addJokeInFavoriteList,\n            removeJokeInFavoriteList,\n            clearFavoriteJokeList\n        })\n)(ButtonBlock)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { AppStateType } from '../Redux/redux-store'\nimport styled from 'styled-components'\n\nconst ContentBlock = styled.div`\n    margin: auto;\n    height: 150px;\n    width: 800px;\n    display: flex;\n    flex-direction: column;\n    justify-content : center;\n    align-items: center;\n    text-align: center;\n    font-size: 22px;\n    \n`\n//----------TYPE BLOCK------------\ntype MapStateToPropsType = {\n    isFavoriteJokeListOpen: boolean\n    currentJoke :{ id: string, value: string} | null\n}\ntype MapDispathPropsType = {}\ntype OwnPropsType = {}\n\ntype PropsType = MapStateToPropsType & MapDispathPropsType & OwnPropsType\n// -------------------------------\nconst Content: React.FC<PropsType> = ({currentJoke, ...props}) => {\n    return (\n        <ContentBlock>\n            <span>{currentJoke ?currentJoke.value : null}</span>\n        </ContentBlock>\n    )\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isFavoriteJokeListOpen: state.app.isFavoriteJokeListOpen,\n        currentJoke: state.app.currentJoke\n    }\n}\n// -----------------------------------------------------------------------------\nexport default compose(\n    connect<MapStateToPropsType, MapDispathPropsType, OwnPropsType, AppStateType>\n        (mapStateToProps, {\n            \n        })\n)\n    (Content)","import React from 'react';\nimport './App.css';\nimport FavoriteJokeBlock from './Copmonents/FavoriteJokeBlock_Component'\nimport ButtonBlock from './Copmonents/ButtonBlock_Component'\nimport TextContainer from './Copmonents/TextContainer_Component'\nimport styled from 'styled-components'\n\n\nconst Container = styled.div`\n  position: absolute;\n  min-width:100%;\n  min-height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  display: grid;\n  grid-template-columns: 9fr 1fr;\n`\n\n\nfunction App() {\n  return (\n    <Container>\n      <FavoriteJokeBlock/>\n      <TextContainer/>\n      <ButtonBlock/>\n    </Container>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, compose, createStore, applyMiddleware } from 'redux'\nimport { save, load } from \"redux-localstorage-simple\"\nimport appReducer from './appReducer'\nimport thunkMiddleware from 'redux-thunk'\n\nlet reducers = combineReducers({\n    app: appReducer\n})\n\ntype ReducersType = typeof reducers\nexport type AppStateType = ReturnType<ReducersType>\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(reducers,\n        load({ states: ['app.favoriteJokeList'] }),\n        composeEnhancers(applyMiddleware(thunkMiddleware,\n        save({ states: ['app.favoriteJokeList'] })\n    ))\n)\n\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\n//@ts-ignore\nwindow.store = store\n\nexport default store\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport store from './Redux/redux-store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n)\n\n\nreportWebVitals()\n"],"sourceRoot":""}